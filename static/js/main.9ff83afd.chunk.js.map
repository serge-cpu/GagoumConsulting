{"version":3,"sources":["components/Contact.js","components/Service.js","components/Conseil.js","components/Accueil.js","components/Menu.js","App.js","serviceWorker.js","index.js"],"names":["Contact","className","Service","Conseil","Accueil","Menu","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","App","Fragment","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sQAWeA,EATC,WAEZ,OACI,yBAAKC,UAAU,aACX,yCCKGC,EATC,WAEZ,OACI,yBAAKD,UAAU,aACX,yCCKGE,EATC,WAEZ,OACI,yBAAKF,UAAU,aACX,yCCKGG,EATC,WAEZ,OACI,yBAAKH,UAAU,aACX,yC,gBCaGI,MAhBf,WACI,OACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MAC1B,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,KAAnB,oBACA,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKd,UAAU,WACb,kBAACc,EAAA,EAAIC,KAAL,CAAUN,KAAK,YAAf,WACA,kBAACK,EAAA,EAAIC,KAAL,CAAUN,KAAK,YAAf,WACA,kBAACK,EAAA,EAAIC,KAAL,CAAUN,KAAK,YAAf,e,MCeGO,MAjBf,WACE,OACE,kBAAC,IAAMC,SAAP,KAEE,kBAAC,IAAD,KACA,kBAAC,EAAD,MACI,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,WAAWC,UAAWhB,IAClC,kBAAC,IAAD,CAAOe,KAAK,WAAWC,UAAWlB,IAClC,kBAAC,IAAD,CAAOiB,KAAK,WAAWC,UAAWjB,IAClC,kBAAC,IAAD,CAAOgB,KAAK,WAAWC,UAAWpB,QCR1BqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9ff83afd.chunk.js","sourcesContent":["import React from 'react'\n\nconst Contact = () => {\n\n    return (\n        <div className=\"container\">\n            <h1>Contact</h1>\n        </div>\n    )\n}\n\nexport default Contact;","import React from 'react'\n\nconst Service = () => {\n\n    return (\n        <div className=\"container\">\n            <h1>Service</h1>\n        </div>\n    )\n}\n\nexport default Service;","import React from 'react'\n\nconst Conseil = () => {\n\n    return (\n        <div className=\"container\">\n            <h1>Conseil</h1>\n        </div>\n    )\n}\n\nexport default Conseil;","import React from 'react'\n\nconst Accueil = () => {\n\n    return (\n        <div className=\"container\">\n            <h1>Accueil</h1>\n        </div>\n    )\n}\n\nexport default Accueil;","import React from 'react'\n//import {Link, NavLink} from 'react-router-dom'\nimport {Nav,Navbar} from \"react-bootstrap\"\nfunction Menu() {\n    return (\n        <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand href=\"/\">GagoumConsulting</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"ml-auto\">\n            <Nav.Link href=\"/Accueil\">Accueil</Nav.Link>\n            <Nav.Link href=\"/Service\">Service</Nav.Link>\n            <Nav.Link href=\"/Contact\">Contact</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    )\n}\n\nexport default Menu;\n","import React from 'react';\nimport {BrowserRouter, Route,Switch} from 'react-router-dom'\nimport Contact from './components/Contact'\nimport Service from './components/Service'\nimport Conseil from './components/Conseil'\nimport Accueil from './components/Accueil'\nimport Menu from './components/Menu'\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <React.Fragment>\n     \n      <BrowserRouter>\n      <Menu />\n          <Switch>\n            <Route path=\"/Accueil\" component={Accueil}/>\n            <Route path=\"/Service\" component={Service}/>\n            <Route path=\"/Conseil\" component={Conseil}/>\n            <Route path=\"/Contact\" component={Contact}/>\n          </Switch>\n    </BrowserRouter>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}